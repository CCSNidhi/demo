name: .NET

on:
  push: 
    branches:
      - main

jobs: 
  build:
    runs-on: Windows-latest
    env:
         VERSION_FILE_NAME: 'MauiApp_version/VERSION'  
         VERSION_BUMP_FILE: 'version_fragment'
   
         ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
 
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 7.0.x

      - name: Install MAUI workload  
        run: dotnet workload install maui
        working-directory: ./MauiApp_version/MauiApp_version
        
         
 
      - name: Get Last Commit Message
        id: getCommitMessage
        run: |
         lastCommitMessage=$(git log -1 --pretty=format:%B)
         echo "message=$lastCommitMessage" >> $GITHUB_ENV
        shell: bash

      - name: Determine Version Bump
        id: determineBump
        run: |
         commitMessage="${{ env.message }}"
         echo "DEBUG: commitMessage='$commitMessage'"
    
         if [[ $commitMessage =~ .*patch.* ]]; then
          echo "bump=patch" >> $GITHUB_ENV
         elif [[ $commitMessage =~ .*minor.* ]]; then
          echo "bump=minor" >> $GITHUB_ENV
         elif [[ $commitMessage =~ .*major.* ]]; then
          echo "bump=major" >> $GITHUB_ENV
         else
          echo "bump=none" >> $GITHUB_ENV
         fi
        shell: bash



      - name: Read Current Version from File
        id: getVersionFromFile
        run: echo "::set-output name=current_version::$(head -n 1 ${{ env.VERSION_FILE_NAME }})"

      - name: Increment Version
        id: incrementVersion
        run: |
         currentVersion=${{ steps.getVersionFromFile.outputs.current_version }}
         bumpType=${{ env.bump }}
         if [ "$bumpType" == "patch" ]; then
           newVersion=$(echo $currentVersion | awk -F. '{$3 = $3 + 1; print}' OFS=. )
         elif [ "$bumpType" == "minor" ]; then
           newVersion=$(echo $currentVersion | awk -F. '{$2 = $2 + 1;  print}' OFS=. )
         elif [ "$bumpType" == "major" ]; then
           newVersion=$(echo $currentVersion | awk -F. '{ $1 = $1 + 1; print}' OFS=. )
         else
          newVersion=$currentVersion
         fi
         newVersionWithRunNumber=$(echo $newVersion | awk -F. '{$4 = ${{ github.run_number }};  print}' OFS=. )
         
         echo "::set-output name=new_version::$newVersionWithRunNumber"
        shell: bash
        env:
         VERSION_FILE_NAME: MauiApp_version/VERSION
         VERSION_BUMP_FILE: version_fragment
         ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: Update Version in Files
        run: |
         newVersion="${{ steps.incrementVersion.outputs.new_version }}"
         find . -name '*.csproj' -exec sed -i "s#<Version>[^<]*</Version>#<Version>$newVersion</Version>#" {} +
         find . -name 'Package.appxmanifest' -exec sed -i "s#Version=\"[0-9.]*\"#Version=\"$newVersion\"#" {} +
         find . -name 'AssemblyInfo.cs' -exec sed -i "s/AssemblyVersion(\"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\").*/AssemblyVersion(\"$newVersion\")/" {} +
         echo "$newVersion" > MauiApp_version/VERSION
        shell: bash
        env:
         VERSION_FILE_NAME: MauiApp_version/MauiApp_version/VERSION
         VERSION_BUMP_FILE: version_fragment
         ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: Configure Git
        run: |
          git config --global user.name 'CCSNidhi'
          git config --global user.email 'ntailorchambal@gmail.com'
          git config --global credential.helper store
      - name: Commit and Push Version Update
        run: |
         git commit -am "Auto version bump to ${{ steps.incrementVersion.outputs.new_version }}"
         git push origin main
        env:
         PAT_TOKEN: ${{ secrets.GIT_TOKEN }}
      

    
      - name: Build
        run: |
          dotnet publish MauiApp_version.csproj -c Release -f:net7.0-windows10.0.19041.0 /p:GenerateAppxPackageOnBuild=true /p
        working-directory: ./MauiApp_version/MauiApp_version
      - name: Fetch New Version
        id: fetchNewVersion
        run: echo "new_version=$(cat VERSION)" >> $GITHUB_EN
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: clickfree-memory-${{ env.NEW_VERSION }}
         path: ./**/*.msix
         
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GIT_TOKEN }}"
          prerelease: false
          files: |
            LICENSE.txt
            *.jar
      - uses: "marvinpinto/action-automatic-releases@${{ env.NEW_VERSION }}"
      - name: Rename MSIX Package
        run: mv ./**/*.msix ClickFree-Memory.msix
        
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: clickfree-memory
         path: ./**/ClickFree-Memory.msix

      






        




