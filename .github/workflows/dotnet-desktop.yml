name: .NET

on:
  push: 
    branches:
      - main

jobs:
  build:
    runs-on: Windows-latest
    env:
         VERSION_FILE_NAME: 'VERSION'
         VERSION_BUMP_FILE: 'version_fragment'
   
         ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
 
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 7.0.x

      - name: Install MAUI workload  
        run: dotnet workload install maui
        working-directory: ./MauiApp_version/MauiApp_version
        
         
 
      - name: Get Last Commit Message
        id: getCommitMessage
        run: |
         $lastCommitMessage = git log -1 --pretty=format:%B
         echo "message=$lastCommitMessage" >> $env:GITHUB_ENV
      - name: Determine Version Bump
        id: determineBump
        run: |
          commitMessage=${{ env.message }}
          if [[ $commitMessage =~ patch ]]; then
            echo "bump=patch" >> $GITHUB_ENV
          elif [[ $commitMessage =~ minor ]]; then
            echo "bump=minor" >> $GITHUB_ENV
          elif [[ $commitMessage =~ major ]]; then
            echo "bump=major" >> $GITHUB_ENV
          else
            echo "bump=none" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Read Current Version from File
        id: getVersionFromFile
        run: echo "::set-output name=current_version::$(head -n 1 VERSION)"

      - name: Increment Version
        id: incrementVersion
        run: |
          currentVersion=${{ steps.getVersionFromFile.outputs.current_version }}
          bumpType=${{ env.bump }}
          
          if [[ $bumpType == 'patch' ]]; then
            newVersion=$(echo $currentVersion | awk -F. '{$3 = $3 + 1; print}' OFS=. )
          elif [[ $bumpType == 'minor' ]]; then
            newVersion=$(echo $currentVersion | awk -F. '{$2 = $2 + 1; $3 = 0; print}' OFS=. )
          elif [[ $bumpType == 'major' ]]; then
            newVersion=$(echo $currentVersion | awk -F. '{$1 = $1 + 1; $2 = 0; $3 = 0; print}' OFS=. )
          else
            newVersion=$currentVersion
          fi
          echo "::set-output name=new_version::$newVersion"
        shell: bash

      - name: Update VERSION File with New Version
        run: echo "${{ steps.incrementVersion.outputs.new_version }}" > VERSION
      - name: Clear Build Cache
        run: dotnet clean --configuration Release
        working-directory: ./MauiApp_version/MauiApp_version

      - name: Clear Artifact Cache
        run: rm -rf ${{ github.workspace }}/**/bin/Release/
      - name: Build
        run: |
          dotnet publish MauiApp_version.csproj -c Release -f:net7.0-windows10.0.19041.0 /p:GenerateAppxPackageOnBuild=true /p
        working-directory: ./MauiApp_version/MauiApp_version
      - name: Fetch New Version
        id: fetchNewVersion
        run: echo "new_version=$(cat VERSION)" >> $GITHUB_EN
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: maui-app-msix
          path: ./**/*.msix 








        




