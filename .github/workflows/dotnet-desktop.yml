name: .NET

on:
  push: 
    branches:
      - main

jobs:
  build:
    runs-on: Windows-latest
    env:
         VERSION_FILE_NAME: 'VERSION'
         VERSION_BUMP_FILE: 'version_fragment'
   
         ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
 
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 7.0.x

      - name: Install MAUI workload  
        run: dotnet workload install maui
        working-directory: ./MauiApp_version/MauiApp_version
        
         
 
      - name: Get Last Commit Message
        id: getCommitMessage
        run: |
         lastCommitMessage=$(git log -1 --pretty=format:%B)
         echo "message=$lastCommitMessage" >> $GITHUB_ENV
        shell: bash

      - name: Determine Version Bump
        id: determineBump
        run: |
          commitMessage=${{ env.message }}
          if [[ $commitMessage =~ patch ]]; then
            echo "bump=patch" >> $GITHUB_ENV
          elif [[ $commitMessage =~ minor ]]; then
            echo "bump=minor" >> $GITHUB_ENV
          elif [[ $commitMessage =~ major ]]; then
            echo "bump=major" >> $GITHUB_ENV
          elif [[ $commitMessage =~ revision ]]; then
            echo "bump=revision" >> $GITHUB_ENV
          else
            echo "bump=none" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Read Current Version from File
        id: getVersionFromFile
        run: echo "::set-output name=current_version::$(head -n 1 ${{ env.VERSION_FILE_NAME }})"

      - name: Increment Version
        id: incrementVersion
        run: |
         currentVersion=${{ steps.getVersionFromFile.outputs.current_version }}
         bumpType=${{ env.bump }}

         if [ "$bumpType" == "patch" ]; then
           newVersion=$(echo $currentVersion | awk -F. '{$3 = $3 + 1; print}' OFS=. )
         elif [ "$bumpType" == "minor" ]; then
           newVersion=$(echo $currentVersion | awk -F. '{$2 = $2 + 1; $3 = 0; print}' OFS=. )
         elif [ "$bumpType" == "major" ]; then
          newVersion=$(echo $currentVersion | awk -F. '{$1 = $1 + 1; $2 = 0; $3 = 0; print}' OFS=. )
         elif [ "$bumpType" == "revision" ]; then
          newRevision=$((github.run_number))
          newVersion="${currentVersion%.*}.$newRevision"
         else
          newVersion=$currentVersion
         fi

          echo "::set-output name=new_version::$newVersion"
        shell: bash
        env:
         VERSION_FILE_NAME: VERSION
         VERSION_BUMP_FILE: version_fragment
         ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: Update Version in csproj
        run: |
          $csprojPath = 'MauiApp_version/MauiApp_version/MauiApp_version.csproj'
          $newVersion = ${{ steps.incrementVersion.outputs.new_version }}
          $csprojContent = Get-Content -Path $csprojPath
          $csprojContent = $csprojContent -replace '<Version>[^<]*</Version>', "<Version>$newVersion</Version>"
          $csprojContent | Set-Content -Path $csprojPath
        shell: pwsh
      - name: Configure Git
        run: |
          git config --global user.name 'CCSNidhi'
          git config --global user.email 'ntailorchambal@gmail.com'
          git config --global credential.helper store
      - name: Commit and Push Version Update
        run: |
          git commit -am "Auto version bump to ${{ steps.incrementVersion.outputs.new_version }}"
          git push origin main
        env:
          PAT_TOKEN: ${{ secrets.GIT_TOKEN }}
      - name: Clear Version in csproj file
        run: |
         cd ./MauiApp_version/MauiApp_version
         sed -i "s#<Version>[0-9.]*</Version>#<Version></Version>#" MauiApp_version.csproj
        shell: bash
      - name: Update Version in csproj
        run: |
         $csprojPath = 'MauiApp_version/MauiApp_version/MauiApp_version.csproj'
         $newVersion = ${{ steps.incrementVersion.outputs.new_version }}
         # Load the XML content of the csproj file
         $csprojContent = Get-Content -Path $csprojPath
         # Update the Version element using regex
         $csprojContent = $csprojContent -replace '<Version>[^<]*</Version>', "<Version>$newVersion</Version>"
         # Write the updated content back to the csproj file
         $csprojContent | Set-Content -Path $csprojPath -Force
        shell: pwsh
      
      - name: Update Version in AppManifest.xml
        run: |
          $newVersion = Get-Content -Path VERSION
          $appManifestPath = ""MauiApp_version/MauiApp_version/Platforms/Windows/Package.appxmanifest.xml"
          $appManifestContent = Get-Content -Path $appManifestPath
          $updatedAppManifestContent = $appManifestContent -replace 'Version="[0-9.]+"', "Version='"$newVersion'""
          $updatedAppManifestContent | Set-Content -Path $appManifestPath
        shell: pwsh
      - name: Build
        run: |
          dotnet publish MauiApp_version.csproj -c Release -f:net7.0-windows10.0.19041.0 /p:GenerateAppxPackageOnBuild=true /p
        working-directory: ./MauiApp_version/MauiApp_version
      - name: Fetch New Version
        id: fetchNewVersion
        run: echo "new_version=$(cat VERSION)" >> $GITHUB_EN
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: maui-app-msix-${{ env.NEW_VERSION }}
         path: ./**/*.msix

      






        




