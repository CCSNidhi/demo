name: .NET

on:
  push: 
    branches:
      - main

jobs:
  build:
    runs-on: Windows-latest
    env:
         VERSION_FILE_NAME: 'VERSION'
         VERSION_BUMP_FILE: 'version_fragment'
   
         ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
 
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 7.0.x

      - name: Install MAUI workload  
        run: dotnet workload install maui
        working-directory: ./MauiApp_version/MauiApp_version
        
         
 
      - name: Get Last Commit Message
        id: getCommitMessage
        run: |
         $lastCommitMessage = git log -1 --pretty=format:%B
         echo "message=$lastCommitMessage" >> $env:GITHUB_ENV
      - name: Determine Version Bump
        id: determineBump
        run: |
         commitMessage=${{ env.message }}
         if [[ $commitMessage =~ patch ]]; then
         echo "bump=patch" >> $GITHUB_ENV
         elif [[ $commitMessage =~ minor ]]; then
         echo "bump=minor" >> $GITHUB_ENV
         elif [[ $commitMessage =~ major ]]; then
         echo "bump=major" >> $GITHUB_ENV
         else
         echo "bump=none" >> $GITHUB_ENV
         fi
        shell: bash



      - name: Update AssemblyVersion and AssemblyFileVersion
        run: |
         $bumpType = $env:bump
         $currentVersion = Get-Content -Path VERSION -First 1
    
         if ($bumpType -eq 'patch') {
          $newVersionParts = $currentVersion -split '\.'
          [int]$newVersionParts[-1]++
          $newVersion = $newVersionParts -join '.'
          }
          elseif ($bumpType -eq 'minor') {
          $newVersionParts = $currentVersion -split '\.'
          [int]$newVersionParts[1]++
          $newVersionParts[-1] = 0
          $newVersion = $newVersionParts -join '.'
          }
          elseif ($bumpType -eq 'major') {
          $newVersionParts = $currentVersion -split '\.'
          [int]$newVersionParts[0]++
          $newVersionParts[1] = 0
          $newVersionParts[-1] = 0
          $newVersion = $newVersionParts -join '.'
          }
          else {
          $newVersion = $currentVersion
          }
    
         # Find AssemblyInfo.cs file
         $assemblyInfoPath = Get-ChildItem -Path . -Recurse -Filter 'AssemblyInfo.cs' | Select-Object -ExpandProperty FullName -First 1
    
         if ($assemblyInfoPath) {
        # Replace the assembly version attributes in the AssemblyInfo.cs file
        (Get-Content -Path $assemblyInfoPath) -replace '\[assembly: System.Reflection.AssemblyFileVersionAttribute\("[^"]*"\)\]', "[assembly: System.Reflection.AssemblyFileVersionAttribute(`"$newVersion`")]" | Set-Content -Path $assemblyInfoPath
        (Get-Content -Path $assemblyInfoPath) -replace '\[assembly: System.Reflection.AssemblyInformationalVersionAttribute\("[^"]*"\)\]', "[assembly: System.Reflection.AssemblyInformationalVersionAttribute(`"$newVersion`")]" | Set-Content -Path $assemblyInfoPath
        }
        else {
        Write-Host "AssemblyInfo.cs file not found."
        }
        shell: powershell
      - name: Update VERSION File with New Version
        run: echo "${{ steps.incrementVersion.outputs.new_version }}" > VERSION

      - name: Build
        run: |
          dotnet publish MauiApp_version.csproj -c Release -f:net7.0-windows10.0.19041.0 /p:GenerateAppxPackageOnBuild=true /p
        working-directory: ./MauiApp_version/MauiApp_version
      - name: Fetch New Version
        id: fetchNewVersion
        run: echo "new_version=$(cat VERSION)" >> $GITHUB_EN
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
         name: maui-app-msix-${{ env.NEW_VERSION }}
         path: ./**/*.msix








        




